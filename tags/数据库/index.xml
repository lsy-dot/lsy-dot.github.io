<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on lsy-dot</title>
    <link>https://lsy-dot.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on lsy-dot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lsy-dot.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mysql学习笔记</title>
      <link>https://lsy-dot.github.io/posts/mysql/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lsy-dot.github.io/posts/mysql/</guid>
      <description>quote 种一棵树最好的时间就是十年前，或者是现在。
参考链接 sql(join on 和where的执行顺序） 关于SQL语句的执行顺序 详细介绍MySQL中的数据类型 详解MySQL执行事务的语法和流程 如何设计索引？ 为什么InnoDB使用B+树而不是B树 4种MySQL分页查询优化的方法，你知道几个？ mysql语法 常用的关键字 select,from,where,and,or [基本]left join,inner join,on,using [多表查询]group by[分组],order by[排序]max,avg,min,count[聚合函数]year,mouth,day,sub [日期函数]union all 常见问题 left join,right join, join的区别 一、基表不同1、left join：left join以左数据表为基表。2、right join：right join以右数据表为基表。二、操作不同1、left join：left join会把左表中的全部信息输出，然后搜索右表中符合条件的记录。2、right join：right join会把右表中的全部信息输出，然后左搜索表中符合条件的记录。三、结果不同1、left join：left join查出来的结果是左边的所有数据和与左边有交集部分的数据。2、right join：right join查出来的结果是右边的所有数据和与右边有交集部分的数据。 sql语句的执行顺序 from&amp;gt;(如果有join会先执行join)where&amp;gt;group by&amp;gt;having&amp;gt;select&amp;gt;order by&amp;gt;limit 常见sql语句错误和一些小技巧 1、Mysql中在用连接查询的时候，若两个表的连接字段名完全相同，则可以使用join using来简化join on简化前select * from question_practice_detail inner join question_detail on question_practice_detail.</description>
    </item>
    
    <item>
      <title>redis学习笔记</title>
      <link>https://lsy-dot.github.io/posts/redis/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lsy-dot.github.io/posts/redis/</guid>
      <description>quote 君子不立危墙之下
参考链接和资料 redis官网 redis 设计与实现 杀穿面试官-深入Redis分布式锁 Redis 在使用中会遇到哪些坑？如何规避？ 分布式id生成策略，我和面试官扯了一个半小时 多时钟解决雪花算法的时间回拨问题 细说Redis分布式锁🔒 Redis RedLock 完美的分布式锁么？ Redis Redlock 的争论 redis基础知识 redis的基本数据结构 redis的数据都是key-value的形式，key是一个字符串value可以是字符串、hash、list、set、zset（有序的set）这五种value的数据量小的时候redis做了一些优化，比如list使用了压缩列表进行压缩降低存储空间，具体可以看redis 设计与实现里面的细节，zset是基于跳表这种数据结构来设计的。底层数据结构String简单动态字符串(会记录长度)List双向链表压缩列表Hash哈希表压缩列表Sorted Set跳表压缩列表Set	压缩列表整数数组推荐阅读:https://blog.csdn.net/yangbindxj/article/details/123482228压缩列表字段头部zlbytes [记录整个压缩列表占用对内存字节数]zltail [记录压缩列表「尾部」节点距离起始地址由多少字节，也就是列表尾的偏移量]zllen [记录压缩列表包含的节点数量]zlend [标记压缩列表的结束点，固定值 0xFF（十进制255）]节点(entry)prevlen [记录了「前一个节点」的长度]encoding [记录了当前节点实际数据的类型以及长度]data [记录了当前节点的实际数据]定位表头和表尾是 O(1)其他位置是 O(n)推荐阅读:https://mp.weixin.qq.com/s?__biz=MzUxODAzNDg4NQ==&amp;amp;mid=2247495350&amp;amp;idx=2&amp;amp;sn=4e121065c30e3243ea2d3c1f71466c1c&amp;amp;scene=21#wechat_redirect跳表链表的优化：之前链表的增删需要一个一个定位在链表上加索引，加的越多，越快，redis中是采用随机数的形式来做的。 redis的特殊数据结构 bitmap统计dau https://segmentfault.</description>
    </item>
    
  </channel>
</rss>
