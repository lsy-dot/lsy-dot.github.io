<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机网络 on lsy-dot</title>
    <link>https://lsy-dot.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on lsy-dot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lsy-dot.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机网络</title>
      <link>https://lsy-dot.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lsy-dot.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
      <description>quote 难道向上攀爬的过程不比站在顶峰更让人热血澎湃吗
参考链接 拥塞控制 流量控制 UDP的首部格式 HTTP的POST与PUT的区别（幂等性） 重定向和转发的区别 什么是队头阻塞以及如何解决 基础知识 架构分层 TCP/IP 应用层:完成不同主机进程间的通信[DNS、HTTP]运输层:完成不同主机间的通信，提供通用的数据传输服务[TCP、UDP]网络层:选择合适的网间路由，交换结点，确保数据的及时传递[IP]数据链路层:完成点到点通信，使接收端明白一个帧的起始和结束物理层:相邻结点比特流的透明传输，屏蔽物理设备、传输介质的差异 OSI 应用层:完成不同主机进程间的通信[DNS、HTTP]#多了这两层表示层:不同机器上的用户之间建立会话[SSL、TLS、RPC]会话层:信息的语法语义以及他们的关联，如加密压缩、转换翻译[LPP、XDP]运输层:完成不同主机间的通信，提供通用的数据传输服务[TCP、UDP]网络层:选择合适的网间路由，交换结点，确保数据的及时传递[IP]数据链路层:完成点到点通信，使接收端明白一个帧的起始和结束物理层:相邻结点比特流的透明传输，屏蔽物理设备、传输介质的差异 重要协议 TCP 首部字段 总结：一共20byte前12byte[2byte+2byte]端口=源端口+目的端口[4byte]序号[4byte]确认号后8byte[4bit]数据偏移[6bit]保留[6bit]标志位(URG、ACK、PSH、SYN、FIN、RST)[2byte]窗口[2byte]校验和[2byte]紧急指针[最大可达40byte]可选字段1.源端口和目的端口，各占2个字节。2.序号：占4个字节，序号范围为0到2的32次方-1，序号增加到2的32次方-1之后，下一个序号变为0，在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号。可对4GB的数据进行编号。在一般情况下可保证当序号重复使用时，旧序号的数据早已通过网络到达终点了。3.确认号：占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。记住：若确认号是N，则表明：到序号N-1为止的所有数据都已正确收到。4.数据偏移：占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远，这个字段实际上是指出TCP报文段的首部长度。6.保留：占6位。保留为今后使用，目前置为07.紧急URG（URGent）：当URG=1时，表明紧急字段有效，告诉系统此报文中有紧急数据，应尽快传送。于是发送方TCP就把紧急数据插入到本报文段数据的最前面，而在紧急数据后面的数据仍是普通数据。这时要与首部中紧急指针字段配合使用。8.确认ACK（ACKnowlegment）仅当ACK=1时确认号字段才有效，TCP规定，连接建立后所有传送的报文段都必须把ACK置1.9.推送PSH（PuSH）：当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应。在这种情况下，TCP就可以使用推送操作。10.复位RST（ReSeT）:当RST=1时，表明TCP连接中出现严重错误，必须释放连接，然后再重新建立运输连接。11.同步SYN，在连接建立时用来同步序号，当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意时，则应在响应的报文段中使SYN=1和ACK=1，因此，SYN置1就表示这是一个连接请求或连接接受报文。12.终止FIN，用来释放一个连接，当FIN=1时，表示此报文段的发送方的数据已发送完毕，并要求释放运输连接。13.窗口，占2个字节，窗口指的是发送本报文段的一方的接收窗口，不是自己的发送窗口，告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。窗口值作为接受方让发送方设置其发送窗口的依据。14.校验和，占2字节。校验和字段检验的范围包括首部和数据这两部分。15.紧急指针：占2个字节，紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数。当所有紧急数据处理完毕时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可发送紧急数据。15.选项：长度可变，最长可达40字节，当没有选项时，TCP的首部长度是20字节。最大报文段长度MSS，MSS是指每一个TCP报文段中的数据字段的最大长度。 三次握手 第一次握手syn：接收方确认了自己的接收和发送方的发送是没问题的 第二次握手syn/ack：发送方确认了自己的发送和接收和发送方的发送是没问题的第三次握手ack：接收方确认了自己的发送和发送方的接收是没问题的第三次的作用是为了防止第一次失效连接的捣乱。丢失处理第一次握手syn丢失重传次数 (/proc/sys/net/ipv4/tcp_syn_retries)[默认是5]超过重传次数就不重传重传超时时间RTO (1,3,7,15,31..)[翻倍上涨]第二次握手syn/ack丢失客户端 SYN 包会发生超时重传由 tcp_syn_retries 决定(默认是5)服务端 SYN、ACK 也会发生超时重传tcp_synack_retries (默认是5)第三次握手ack失败服务端一直重传到最大次数就断开客户端不发数据就到时间断开发数据就一直重传到最大次数断开如果三次握手之后拔网线，会发生什么？TCP的心跳机制会保证断开(2小时发一次太慢了，可以在应用层做保障) 四次挥手 finackfinack为什么中间要分开来，是因为接收方可能还有要发送的数据。 为什么最后发完ack要等待2msl，因为ack可能丢失，丢失要重发，还能利用存活时间清除丢失的包 可靠传输 1、数据分块，编号，接收排序，组装2、校验和3、流量控制（滑动窗口）4、停止等待ARQ（确认，超时重传）5、拥塞控制（拥塞窗口cwnd） 拥塞控制和流量控制 拥塞控制（针对整个网络而言）1、慢开始:当主机开始发送数据时，由于并不清楚网路的负荷情况，所以如果立即把大量数据字节注入到网络，那么就有可能引发网络发生拥塞。所以最好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到达逐渐增大拥塞窗口值。总结:窗口指数上升，探测网络的上限2、拥塞避免:为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量，总结:达到上限，开始线性指数上升。3、快重传和快恢复:为什么要？(避免个别报文的丢失造成误认为拥塞从而导致慢开始降低传输效率)有时，个别报文段会在网络中丢失，但实际上网络并未发生拥塞，如果发送方迟迟收不到确认，就会产生超时，就会误认为网络发生了拥塞，就导致了上图中重新开始了慢开始，将拥塞窗口cwnd又设置为1，因而降低了传输效率。执行流程：快重传算法规定，发送方只要一连收到3个重复确认，就知道接收方确实没有收到报文段，那么开始快恢复算法，总结:3个重复确认，窗口减半，开始拥塞避免。流量控制（针对端到端而言）TCP头部字段设置发送窗口的大小，TCP发送方的发送窗口 = min{ 自身拥塞窗口，TCP接收方的接收窗口 } UDP 首部字段 总结:这里的伪首部只是为了计算校验和[2byte]源端口号[2byte]目标端口号[]包长度[]校验和UDP用户数据报首部中检验和的计算方法很特殊。在计算检验和时，要在UDP用户数据报之前增加12个字节的伪首部。所谓“伪首部”是因为这种伪首部并不是UDP用户数据报的真正的首部。只是在计算检验和时临时添加在UDP用户数据报前面，得到一个临时的UDP用户数据报。检验和就是按照这个临时的UDP用户数据报来计算的。伪首部既不向下传送也不向上递交，而仅仅是为了计算检验和。源端口号：表示发送端端口号，字段长16位。该字段是可选项，有时可能不会设置源端口号。没有源端口号的时候该字段的设置为0。可用于不需要返回的通信中。目标端口号：表示接收端端口，字段长度16位。包长度：该字段保存了UDP首部的长度跟数据的长度之和。单位为字节。校验和：校验和是为了提供可靠的UDP首部和数据而设计的。 和TCP的对比 TCP:面向连接,可靠交付,面向字节流,一对一,首部20字节必选，40字节可选UDP:无连接,最大努力交付,面向报文,一对一、一对多、多对一、多对多,8字节，源端口、目的端口、长度、检验和 http 端口 服务端：80 客户端：动态分配 报文结构 报文首部请求行[方法、URI、HTTP版本]首部字段请求首部字段通用首部字段实体首部字段其他空行报文主体 请求方式 http1.</description>
    </item>
    
  </channel>
</rss>
