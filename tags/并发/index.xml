<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>并发 on lsy-dot</title>
    <link>https://lsy-dot.github.io/tags/%E5%B9%B6%E5%8F%91/</link>
    <description>Recent content in 并发 on lsy-dot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lsy-dot.github.io/tags/%E5%B9%B6%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java并发</title>
      <link>https://lsy-dot.github.io/posts/java%E5%B9%B6%E5%8F%91todo/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://lsy-dot.github.io/posts/java%E5%B9%B6%E5%8F%91todo/</guid>
      <description>quote 难道向上攀爬的过程不比站在顶峰更让人热血澎湃吗
参考链接 [从ReentrantLock的实现看AQS的原理及应用]
(九)深入分析AQS实现原理
基本概念 并行和并发 并发指的是多个任务交替进行，而并行则是指真正意义上的“同时进行”。 进程和线程 同步和异步 同步方法调用一开始，调用者必须等待被调用的方法结束后，调用者后面的代码才能执行。而异步调用，指的是，调用者不用管被调用方法是否完成，都会继续执行后面的代码，当被调用的方法完成后会通知调用者。 java线程 进程:分配资源最小的单位线程:调度的最小单位1、包含关系：进程基本上相互独立的，而线程存在于进程内，是进程的一个子集2、资源共享：进程拥有共享的资源，如内存空间等，供其内部的线程共享3、通信：进程间通信较为复杂,线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量4、体量：线程更轻量，线程上下文切换成本一般上要比进程上下文切换低 状态 定义 javaNewRunnable,blocked waiting,time-waitingTerminatedos操作系统初始状态可运行状态阻塞状态运行状态终止状态 线程何时出现blocked的状态 synchronized 修饰的方法、代码块同一时刻只允许一个线程执行，其他线程只能等待，等待的线程会从 RUNNABLE 转变到 BLOCKED 状态。https://www.javanav.com/interview/991455b7c5174aa8b3f820388c1138fc.html NEW 到 RUNNABLE 状态 从 NEW 状态转变到 RUNNABLE 状态调用线程对象的 start() 方法就可以了 RUNNABLE 与 WAITING 的状态转变 调用 Object.notify()、Object.notifyAll() 方法，线程可能从 WAITING 转变到 RUNNABLE 状态。当调用 t.join() 的时候，执行代码的线程的状态会从 RUNNABLE 转变到 WAITING调用 LockSupport.</description>
    </item>
    
  </channel>
</rss>
